Test-Driven Development
=======================

Material de apoio
-----------------


Atividade dos algarismos romanos (slide 17)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Apresentação:

1. Descrever o problema (slide 23)
2. Preparar o ambiente (slide 24)
3. Mostrar as etapas de um teste (slide 25)
4. Dar as dicas (slide 26)
5. Trabalhar no terminal
6. Montar o arquivo test_roman.py::

	import unittest

	from roman import to_roman

	class TestRoman(unittest.TestCase):
	    def test_zero(self):
	        self.assertEquals("", to_roman(0))

7. Executar com unittest::

     python -m unittest test_roman

8. Executar com nose::

     nosetests

9. doctests

 * Mostrar como testar com o doctest (test_roman.txt)::

     Vamos testar o número 0::

         >>> from roman import to_roman
         >>> to_roman(0)
         ''

 * Executar com doctest::

     python -m doctest test_roman.txt

 * Executar com nose::

     nosetests --with-doctest --doctest-extension=txt

10. Voltar para slides

O problema do Roman
+++++++++++++++++++

Passos para ilustrar::

1. Testa o retorno de zero -> "" e simplesmente retorna ""
2. Testa o retorno para 1 -> "I" e coloca um if n == 1: ...
3. Testa retorno do 2 -> "II" mas usa "Triangulate" por conta de duas ou mais
   condições de retorno.
4. Implementar um concatenador que retorne "I"*N


Problema resolvido::

    #!python
    class OutOfRangeError(Exception):
        pass


    roman_numeral_map = (
        ('M', 1000), ('CM', 900),
        ('D',  500),  ('CD', 400),
        ('C',  100),  ('XC', 90),
        ('L',  50),    ('XL', 40),
        ('X',  10),   ('IX', 9),
        ('V',  5),     ('IV', 4),
        ('I',  1))


    def to_roman(x):
        output = ''
        if x < 1:
            raise OutOfRangeError
        for roman, normal in roman_numeral_map:
            while x - normal >= 0:
                output += roman
                x -= normal
        return output

    # tests.py
    import unittest
    import roman_numerals

    class ToRomanKnown(unittest.TestCase):
        def test_known(self):
            self.assertEqual(roman_numerals.to_roman(5), "V")
            self.assertEqual(roman_numerals.to_roman(10), "X")
            self.assertEqual(roman_numerals.to_roman(15), "XV")
            self.assertEqual(roman_numerals.to_roman(42), "XLII")

    class ToRomanBadInput(unittest.TestCase):
        def test_zero(self):
            self.assertRaises(roman_numerals.OutOfRangeError, roman_numerals.to_roman, 0)

        def test_negative(self):
            self.assertRaises(roman_numerals.OutOfRangeError, roman_numerals.to_roman, -1)


    if __name__ == '__main__':
        unittest.main()

Características
~~~~~~~~~~~~~~~

Apresentação:

* Características dos testes (slide 27)
* Detalhar isolamento (slide 28)
* Detalhar legibilidade (slides 29, 30 e 31)
* Apresentar dicas (slides 32, 33)
